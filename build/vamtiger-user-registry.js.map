{"version":3,"file":"vamtiger-user-registry.js","sources":["../source/types.ts","../source/css/document-index.ts","../source/html/index.ts","../source/get-template.ts","../source/config.ts","../source/close-confirmation.ts","../source/handle-user.ts","../source/delete-user.ts","../source/get-users.ts","../source/add-new-user.ts","../source/get-user.ts","../source/element.ts","../source/vamtiger-user-registry.ts","../source/handle-footer.ts","../source/handle-event.ts"],"sourcesContent":["import * as VBM from 'vamtiger-browser-method/build/types';\nimport VamtigerUserRegistry from './element';\n\nexport enum StringConstant {\n    nothing = ''\n}\n\nexport enum Selector {\n    shadowUi = '[data-vamtiger-user-listing]',\n    style = 'style',\n    user = '[data-user]',\n    footer = '[data-footer]',\n    overlay = '[data-overlay]',\n    confirmDialog = '[data-confirm-dialog]',\n    confirmDeleteDialog = '[data-confirm-delete-user]',\n    confirmAddNewUserDialog = '[data-confirm-add-new-user]',\n    cancelDialog = '[data-confirm-button-cancel]',\n    confirmButtonOkay = '[data-confirm-button-ok]',\n    addNewUserButton = '[data-action-add-user]',\n    addNewUserForm = '[data-add-new-user-form]',\n    addNewUserFormError = 'label ~ [data-error]',\n    addNewUserFormInputError = '[data-form-group][data-error], input[data-error]',\n    layoutMarkersToggle = '[data-layout-markers-toggle]',\n    formGroup = '[data-form-group]'\n}\n\nexport enum EventName {\n    connected = 'vamtiger-user-registry-connected',\n    addUser = 'vamtiger-user-registry-add-user',\n    userAdded = 'vamtiger-user-registry-user-added'\n}\n\nexport enum RequestMethod {\n    DELETE = 'DELETE',\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT'\n}\n\nexport enum ObservedAttributes {\n}\n\nexport enum SlotName {\n    headerImage = 'header-image',\n    headerCapation = 'header-caption',\n    action = 'action',\n    user = 'user',\n    overlay = 'overlay',\n    footer = 'footer'\n}\n\nexport interface IGetTemplate {\n    selector: Selector;\n    attributes?: IAttributes;\n    properties?: IProperties;\n}\n\nexport interface IAttributes {\n    id?: string;\n    for?: string;\n    name?: string;\n    slot?: string;\n}\n\nexport interface IProperties {\n    innerHTML?: string;\n}\n\nexport interface IDeleteUser {\n    element: VamtigerUserRegistry;\n    userElement?: HTMLElement;\n}\n\nexport interface ICloseConfirmation {\n    element: VamtigerUserRegistry;\n}\n\nexport interface IUserRegistryElementDataset extends DOMStringMap{\n    connected?: string;\n    getUsersUrl?: string;\n    getUserUrl?: string;\n    getUsersError?: string;\n    getAllUsers?: string;\n    deleteUserUrl?: string;\n    addNewUserUrl?: string;\n    handleUserTimeot?: string;\n    confirm?: 'Delete user' | 'Add new user';\n    layoutMarkers?: string;\n    testMode?: string;\n    error?: string;\n    defaultErrorMessage?: string;\n    inactivateUserElementRender?: string;\n}\n\nexport interface IHandleFooter {\n    element: VamtigerUserRegistry;\n    mutationLisit: MutationRecord[];\n    observer: MutationObserver;\n}\n\nexport interface IParams {\n    getUsersUrl: string;\n    getUserUrl: string;\n    getUsersNextPageUrl?: string;\n    getAllUsers?: boolean;\n\n    deleteUserUrl: string;\n\n    addNewUserUrl: string;\n\n    handleUserTimeout: number;\n\n    layoutMarkers: boolean;\n    testMode: boolean;\n}\n\nexport interface IUserRegistryElement extends HTMLElement {\n    dataset: UserRegistryElementDataset;\n}\n\nexport interface IGetUsers {\n    element: VamtigerUserRegistry;\n}\n\nexport interface IGetUser {\n    element: VamtigerUserRegistry;\n    userId: number;\n}\n\nexport interface IUser {\n    id: number;\n    name: string;\n    surname: string;\n    email: string;\n    position: string;\n}\n\nexport interface IGetUserSuccessResponse {\n    result: 'successful',\n    message: 'retrieved user(s)',\n    data: {\n        user: IUser\n    }\n}\n\nexport interface IGetUserFailedResponse {\n    result: \"failed\",\n    message: \"retrieved user(s) failed\",\n    data: {\n        user: number;\n    }\n}\n\nexport interface IResponseBase {\n    result: 'successful' | 'failed' | 'error';\n    message: string;\n}\n\nexport interface IUsersResponse extends IResponseBase {\n    data: {\n        users: {\n            current_page: number;\n            from: number;\n            last_page: number;\n            per_page: number;\n            to: number;\n            total: number;\n\n            first_page_url: string;\n            last_page_url: string;\n            next_page_url: string;\n            path: string;\n            prev_page_url: string | null;\n\n            data: IUser[]\n        }\n    }\n}\n\nexport interface IDeleteUserResponse extends IResponseBase {\n    data: {\n        user: number;\n        delete: number;\n    }\n}\n\nexport interface IAddNewUserSuccessResponse {\n    result: 'successful';\n    message: 'added new user',\n    data: {\n        user: number\n    }\n}\n\nexport interface IAddNewUserFailedResponse {\n    result: 'failed';\n    message: 'failed to add new user',\n    data: {\n        [key: string]: {\n            error: string;\n            errorDescription?: string;\n        }[]\n    }\n}\n\nexport interface IHandleUser {\n    element: VamtigerUserRegistry;\n    user: IUser;\n}\n\nexport interface IAddNewUser {\n    element: VamtigerUserRegistry;\n}\n\nexport interface IAddUserEventMessage extends CustomEventInit {\n    user?: IUser;\n}\n\nexport interface IHandleEvent {\n    element: VamtigerUserRegistry;\n    event: CustomEventInit<IAddUserEventMessage>\n}\n\ntype UserRegistryElementDataset = {[K in keyof IUserRegistryElementDataset]: IUserRegistryElementDataset[K]};\n\nexport type AttributesKey = keyof IAttributes;\n\nexport type ObservedAttribute = keyof typeof ObservedAttributes;\n\nexport type AddNewUserResponse = IResponseBase\n    & (IAddNewUserSuccessResponse | IAddNewUserFailedResponse);\n\nexport type GetNewUserResponse = IResponseBase\n    & (IGetUserSuccessResponse | IGetUserFailedResponse)\n\nexport type GetTemplate<P extends IGetTemplate> =\n    P['selector'] extends Selector.style ? HTMLStyleElement :\n    P['selector'] extends Selector.addNewUserButton ? HTMLButtonElement :\n    P['selector'] extends Selector.confirmDialog\n        | Selector.shadowUi\n        | Selector.user\n        | Selector.confirmDeleteDialog\n        | Selector.confirmAddNewUserDialog\n        ? HTMLDivElement :\n    null;\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            'vamtiger-user-registry': React.DetailedHTMLProps<React.HTMLAttributes<VamtigerUserRegistry>, VamtigerUserRegistry>;\n        }\n    }\n}","export default `vamtiger-user-registry button,vamtiger-user-registry fieldset,vamtiger-user-registry form,vamtiger-user-registry input,vamtiger-user-registry label{margin:nonne;padding:none;border:none;outline:none;-webkit-appearance:none}vamtiger-user-registry button{cursor:pointer}@-webkit-keyframes a{0%{opacity:0;visibility:hidden}to{opacity:1;visibility:visible}}@keyframes a{0%{opacity:0;visibility:hidden}to{opacity:1;visibility:visible}}@-webkit-keyframes b{0%{top:2em;opacity:0}to{top:0;opacity:1}}@keyframes b{0%{top:2em;opacity:0}to{top:0;opacity:1}}vamtiger-user-registry{opacity:0}vamtiger-user-registry [data-button],vamtiger-user-registry form input,vamtiger-user-registry form label{cursor:pointer}vamtiger-user-registry [data-display-grid]{display:grid}vamtiger-user-registry [data-position-relative]{position:relative}vamtiger-user-registry [slot=user]{position:relative;overflow:hidden}vamtiger-user-registry [slot=user] *{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}vamtiger-user-registry [slot=user]:nth-child(odd){background-color:#d3d3d3}vamtiger-user-registry [slot=user]:nth-child(2n),vamtiger-user-registry [slot=user] [data-delete]{background-color:#fff}vamtiger-user-registry [slot=user] [data-delete]{display:grid;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:absolute;height:100%;width:2em;top:0;right:-2em;-webkit-transition:right 235ms;transition:right 235ms;color:red;font-size:1.5em;pointer-events:none}vamtiger-user-registry [slot=user]:hover [data-delete]{right:0}vamtiger-user-registry [slot=overlay]{visibility:hidden;position:relative;grid-row:1;grid-column:1}vamtiger-user-registry [slot=overlay] [data-confirm-header]{font-size:1.5em}vamtiger-user-registry [slot=overlay] [data-confirm-body]{font-size:1.1em;margin-bottom:1em}vamtiger-user-registry [slot=overlay] [data-header-underline]{height:1px;background-color:#d3d3d3}vamtiger-user-registry [slot=overlay] [data-confirm-footer]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse}vamtiger-user-registry [slot=overlay] [data-confirm-footer] [data-confirm-button]{display:grid;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:8em;height:3.4em}vamtiger-user-registry [slot=overlay] [data-confirm-footer] [data-confirm-button][data-confirm-button-ok]{color:#fff;background-color:#000}vamtiger-user-registry [slot=overlay] [data-confirm-footer] [data-confirm-button][data-confirm-button-cancel]{color:gray;background-color:#fff}vamtiger-user-registry [slot=overlay] [data-confirm-footer] [data-confirm-button]:hover{-webkit-filter:inver(1);filter:inver(1)}vamtiger-user-registry [slot=overlay] [data-confirm-footer] [data-confirm-button]:nth-child(n+2){margin-right:1em}vamtiger-user-registry input{border:1px solid #000}vamtiger-user-registry [data-confirm-body] [data-confirm-input-form]{grid-row-gap:1em}vamtiger-user-registry [data-confirm-body] [data-confirm-input-form] [data-form-group]{display:grid;grid-row-gap:.5em;position:relative;grid-auto-rows:minmax(1.2em,auto)}vamtiger-user-registry [data-confirm-body] [data-confirm-input-form] [data-form-group] label{display:grid;grid-row-gap:.5em}vamtiger-user-registry [data-confirm-body] [data-confirm-input-form] [data-form-group] input{padding:.4em;font-size:1em}vamtiger-user-registry [data-confirm-body] [data-confirm-input-form] [data-form-group][data-error] label~[data-error]:after{display:inline-block;content:attr(data-error);font-size:.8em;color:red}vamtiger-user-registry[data-connected]{-webkit-animation:a 387ms linear forwards;animation:a 387ms linear forwards\n\n    /* & [slot=\"user\"]\n    {\n        animation: var(--vamtiger-user-listing-fade-in-animation);\n    } */}vamtiger-user-registry[data-confirm] [slot=overlay]{-webkit-animation:b 135ms;animation:b 135ms}vamtiger-user-registry[data-confirm=\"Add new user\"] [data-confirm-add-new-user],vamtiger-user-registry[data-confirm=\"Delete user\"] [data-confirm-delete-user]{visibility:visible}vamtiger-user-registry[data-test-mode] [data-confirm-button-ok]{visibility:none;cursor:not-allowed}\n/* layout markers*/vamtiger-user-registry[data-layout-markers] [slot=overlay]>:nth-child(odd){background-color:#b0c4de}vamtiger-user-registry[data-layout-markers] [slot=overlay]>:nth-child(2n){background-color:#d3d3d3}vamtiger-user-registry[data-layout-markers] [slot=overlay] [data-add-new-user-form]>:nth-of-type(odd){background-color:#ffb6c1}vamtiger-user-registry[data-layout-markers] [slot=overlay] [data-add-new-user-form]>:nth-of-type(odd)>:nth-of-type(odd){background-color:#90ee90}vamtiger-user-registry[data-layout-markers] [slot=overlay] [data-add-new-user-form]>:nth-of-type(2n){background-color:#008b8b}vamtiger-user-registry[data-layout-markers] [slot=overlay] [data-add-new-user-form]>:nth-of-type(2n)>:nth-of-type(odd){background-color:#d3d3d3}\n/*# sourceMappingURL=document-index.ts.map */`;","export default `<div slot=\"overlay\" data-confirm-dialog data-confirm-add-new-user> <div data-confirm-header> Add new user </div> <div data-header-underline></div> <div data-confirm-body data-display-grid> <form data-add-new-user-form data-confirm-input-form data-display-grid> <div data-form-group> <label> <span>Name</span> <input name=\"name\"> </label> <span data-error></span> </div> <div data-form-group> <label> <span>Surname</span> <input name=\"surname\"> </label> <span data-error></span> </div> <div data-form-group> <label> <span>Email</span> <input type=\"email\" name=\"email\"> </label> <span data-error></span> </div> <div data-form-group> <label> <span>Position</span> <input name=\"position\"> </label> <span data-error data-default-error-message=\"Please enter your current position\"></span> </div> </form> </div> <div data-confirm-footer> <button data-confirm-button data-confirm-button-ok> <span>Confirm</span> </button> <button data-confirm-button data-confirm-button-cancel> <span>Cancel</span> </button> </div> </div> <div slot=\"overlay\" data-confirm-dialog data-confirm-delete-user> <div data-confirm-header> Confirm delete </div> <div data-header-underline></div> <div data-confirm-body> <span> Please confirm that you would like to delete this user. </span> </div> <div data-confirm-footer> <button data-confirm-button data-confirm-button-ok> <span>Confirm</span> </button> <button data-confirm-button data-confirm-button-cancel> <span>Cancel</span> </button> </div> </div> <button slot=\"action\" data-action-add-user>Add new user</button> <div data-user data-button></div> <div data-vamtiger-user-listing> <div data-test-mode> <span data-title> test mode </span> <div data-separator></div> <div data-layout-markers-controls> <span data-label> layout markers </span> <div data-layout-markers-toggle></div> </div> </div> <div data-header> <div data-header-overlay></div> <figure data-header-image> <slot name=\"header-image\"></slot> </figure> <div data-header-caption> <slot name=\"header-caption\"></slot> </div> </div> <div data-body> <div data-left-side-bar></div> <div data-user-listing> <div data-action> <slot name=\"action\"></slot> </div> <div data-users> <slot name=\"user\"></slot> </div> </div> <div data-right-side-bar></div> </div> <div data-footer> <a data-backend>Laravel</a> <span data-separator></span> <a data-frontend>Web Components</a> </div> <div data-overlay> <slot name=\"overlay\"></slot> </div> </div>`;","import {\n    IGetTemplate,\n    GetTemplate,\n    StringConstant,\n    AttributesKey\n} from './types';\nimport html from './html';\nimport css from './css';\n\nconst { nothing } = StringConstant;\nconst template = document.createElement('template');\nconst stylesheet = `<style>${css}</style>`\nconst templateHtml = [\n    stylesheet,\n    html\n].join(nothing);\n\ntemplate.innerHTML = templateHtml;\n\nexport default <P extends IGetTemplate>(params: P) => {\n    const {\n        selector,\n        attributes = {},\n        properties = {}\n    } = params;\n    const attributesKeys = Object.keys(attributes) as AttributesKey[]\n    const templateElement = template.content.querySelector(selector);\n    const currentTemplate = templateElement && templateElement.cloneNode(true) as GetTemplate<P>;\n\n    if (currentTemplate) {\n        Object.assign(currentTemplate, properties);\n\n        attributesKeys.forEach(key => attributes[key] && currentTemplate.setAttribute(key, attributes[key] || ''));\n    }\n\n    return currentTemplate;\n};","import {\n    ObservedAttributes,\n    ObservedAttribute,\n    EventName\n} from './types'\n\nexport const shadowRoot = {\n    mode: 'open'\n} as ShadowRootInit;\n\nexport const observedAttributes = Object.keys(ObservedAttributes) as ObservedAttribute[];\n\nexport const eventParams = {\n    bubbles: true\n};\n\nexport const customEvent = {\n    [EventName.connected]: new CustomEvent(EventName.connected, {\n        ...eventParams\n    })\n}\n\nexport const idleTimeout = 1;\n\nexport const observer = {\n    childList: true\n};\n\nexport const footerObserver = {\n    attributes: true\n};\n\nexport const clickEventName = document.ontouchstart ? 'touchstart' : 'click';\n\nexport const dependencies = [\n    {\n        name: 'font-awesome',\n        href: 'https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css'\n    }\n]","import { ICloseConfirmation, IUserRegistryElement, Selector  } from './types';\n\nexport default function ({element} : ICloseConfirmation) {\n    const { shadowRoot } = element;\n    const dataset: IUserRegistryElement['dataset'] = element.dataset;\n    const overlay = shadowRoot?.querySelector<HTMLElement>(Selector.overlay);\n    const overlayDataset: IUserRegistryElement['dataset'] | undefined = overlay?.dataset;\n\n    if (overlayDataset) {\n        delete dataset.confirm;\n        delete overlayDataset.confirm;\n    }\n}","import {\n    IHandleUser,\n    Selector,\n    SlotName,\n    EventName\n} from './types';\nimport {\n    eventParams\n} from './config';\nimport { idleTimeout, clickEventName } from './config';\nimport getTemplate from './get-template';\nimport { confirm as confirmDelete } from './delete-user';\n\nconst { requestIdleCallback } = self;\n\nexport default function (params: IHandleUser) {\n    const { element } = params;\n\n    if (!element.user) {\n        element.user = new Map();\n    }\n\n    if (requestIdleCallback) {\n        requestIdleCallback(() => handleUser(params));\n    } else {\n        setTimeout(() => handleUser(params), idleTimeout);\n    }\n}\n\nfunction handleUser({element, user}: IHandleUser) {\n    const { params } = element;\n    const { name, surname, email } = user;\n    const ignore = element.user && Array\n        .from(element.user.values())\n        .some(({id}) => id === user.id);\n    const userTemplate = !ignore && [\n        `<span data-name>${name}</span>`,\n        `<span data-surname>${surname}</span>`,\n        `<span data-email>${email}</span>`,\n        '<span data-delete class=\"fa fa-trash\" aria-hidden=\"true\"></delete>'\n    ].join('');\n    const userElement = userTemplate  && getTemplate({\n        selector: Selector.user,\n        properties: {\n            innerHTML: userTemplate\n        },\n        attributes: {\n            slot: SlotName.user\n        }\n    });\n\n    if (userElement) {\n        element.user.set(userElement, user);\n\n        userElement.addEventListener(clickEventName, () => confirmDelete({element, userElement}));\n\n        element.appendChild(userElement);\n\n        element.dispatchEvent(new CustomEvent(\n            EventName.userAdded,\n            {\n                ...eventParams,\n                detail: {user}\n            }\n        ));\n    }\n}","import {\n    IUserRegistryElement,\n    IDeleteUser,\n    IDeleteUserResponse,\n    Selector,\n    RequestMethod\n} from './types';\nimport closeConfirmation from './close-confirmation';\n\nexport default async function ({element}: IDeleteUser) {\n    const { params, deleteUserElement: userElement } = element;\n    const { deleteUserUrl } = params;\n    const user = userElement && element.user.get(userElement);\n    const url = user?.id && `${deleteUserUrl}/${user.id}`;\n    const requestParams = {\n        method: RequestMethod.DELETE\n    }\n\n    let response: IDeleteUserResponse;\n\n    if (url) {\n        try {\n            response = await fetch(url, requestParams)\n                .then(response => response.json());\n\n            if (response.result === 'successful' && userElement) {\n                element.deleteUserElement = undefined;\n\n                element.user.delete(userElement);\n\n                userElement.parentElement?.removeChild(userElement);\n\n                closeConfirmation({element});\n            }\n        } catch(error) {\n            console.error('Delete Usesr error');\n            console.error(error);\n        }\n    }\n}\n\nexport function confirm({element, userElement}: IDeleteUser) {\n    const { shadowRoot } = element;\n    const dataset: IUserRegistryElement['dataset'] = element.dataset;\n    const overlay = shadowRoot?.querySelector<HTMLElement>(Selector.overlay);\n    const overlayDataset: IUserRegistryElement['dataset'] | undefined = overlay?.dataset;\n\n    if (overlayDataset) {\n        dataset.confirm = 'Delete user';\n        overlayDataset.confirm = dataset.confirm;\n        element.deleteUserElement = userElement;\n    }\n}","import {\n    IGetUsers,\n    IUsersResponse,\n    IUserRegistryElement,\n    Selector\n} from './types';\nimport handleUser from './handle-user';\n\nconst { VamtigerBrowserMethod } = self;\nconst { pause, intersectionObserver } = VamtigerBrowserMethod;\n\nexport default async function getUsers({ element }: IGetUsers) {\n    const { params, user, shadowRoot, footerObserver, requestUrls } = element;\n    const dataset: IUserRegistryElement['dataset'] = element.dataset;\n    const {\n        getUsersUrl = '',\n        getUsersNextPageUrl = '',\n        getAllUsers,\n        handleUserTimeout\n    } = params;\n    const footer = shadowRoot?.querySelector<HTMLElement>(Selector.footer);\n    const url = user.size ? getUsersNextPageUrl : getUsersUrl;\n\n    let usersResponse: IUsersResponse;\n    let currentUsers: IUsersResponse['data']['users']['data'];\n    let footerVisible = 0;\n\n    if (!requestUrls.has(url)) {\n        requestUrls.add(url);\n\n        try {\n            usersResponse = url && await fetch(url)\n                .then(response => response.json());\n\n            currentUsers = usersResponse?.data?.users?.data || [];\n            params.getUsersNextPageUrl = usersResponse?.data?.users?.next_page_url || '';\n\n            for (const user of currentUsers) {\n                await handleUser({\n                    element,\n                    user\n                });\n            }\n\n            let footerVisible = Number(footer?.dataset?.visible || 0);\n\n            if (getAllUsers || footerVisible) {\n                await getUsers({element});\n            }\n\n            if (!url && footer) {\n                footerObserver?.disconnect();\n                intersectionObserver?.unobserve(footer);\n            }\n        } catch (error) {\n            dataset.getUsersError = '';\n        }\n    }\n}","import {\n    IAddNewUser,\n    IUserRegistryElement,\n    IAddNewUserFailedResponse,\n    Selector,\n    RequestMethod,\n    AddNewUserResponse\n} from './types';\nimport getUser from './get-user';\n\nexport default async function ({element}: IAddNewUser) {\n    const { params } = element;\n    const { addNewUserUrl: url } = params;\n    const form = element.querySelector<HTMLFormElement>(Selector.addNewUserForm);\n    const formData = form && new FormData(form);\n    const requestParams = {\n        method: RequestMethod.POST,\n        body: formData\n    };\n\n    let response: AddNewUserResponse;\n\n    if (url) {\n        try {\n            response = await fetch(url, requestParams)\n                .then(response => response.json());\n\n            if (response.result === 'successful') {\n                await getUser({\n                    element,\n                    userId: response.data.user\n                });\n\n                form?.reset();\n            } else {\n                handleFailure({element, response});\n            }\n        } catch(error) {\n            console.error('Error Adding New User');\n            console.error(error);\n        }\n    }\n}\n\nexport function confirm({element}: IAddNewUser) {\n    const { shadowRoot } = element;\n    const dataset: IUserRegistryElement['dataset'] = element.dataset;\n    const overlay = shadowRoot?.querySelector<HTMLElement>(Selector.overlay);\n    const overlayDataset: IUserRegistryElement['dataset'] | undefined = overlay?.dataset;\n\n    if (overlayDataset) {\n        dataset.confirm = 'Add new user';\n        overlayDataset.confirm = dataset.confirm;\n    }\n}\n\nexport function handleFailure({ element, response }: IAddNewUser & {response: IAddNewUserFailedResponse}) {\n    const form = element.querySelector<HTMLFormElement>(Selector.addNewUserForm);\n    const errorElements = form && new Set(Array.from(form.querySelectorAll<HTMLElement>(Selector.addNewUserFormInputError)) ||  []);\n\n    let formGroup: HTMLElement | null;\n    let selector: string;\n    let errorSelector: string;\n    let error: string;\n    let input: HTMLInputElement | null;\n    let inputData: IUserRegistryElement['dataset'] | undefined;\n    let inputError: HTMLElement | null;\n    let inputErrorData: IUserRegistryElement['dataset'] | undefined;\n    let formGroupErrorData: IUserRegistryElement['dataset'] | undefined;\n\n    console.log({response});\n    if (form) for (const field in response.data) {\n        selector = `input[name=\"${field.split('.').pop() || ''}\"]`;\n        errorSelector = `${selector} ~ ${Selector.addNewUserFormError}`;\n        error = response.data[field][0].errorDescription\n            || response.data[field][0].error\n            || '';\n        input = form.querySelector(selector)\n        formGroup = input?.closest<HTMLElement>(Selector.formGroup) || null;\n        inputError = formGroup?.querySelector(Selector.addNewUserFormError) || null;\n        inputData = input?.dataset;\n        inputErrorData = inputError?.dataset;\n        formGroupErrorData = formGroup?.dataset;\n\n        if (inputData && inputErrorData && formGroupErrorData) {\n            inputData.error = '';\n            formGroupErrorData.error = '';\n            inputErrorData.error = inputErrorData.defaultErrorMessage || error;\n\n            formGroup && errorElements?.delete(formGroup);\n            input && errorElements?.delete(input);\n        }\n    }\n\n    errorElements && Array.from(errorElements).forEach(errorElement => delete errorElement.dataset.error);\n}","import {\n    IGetUser,\n    GetNewUserResponse\n} from './types';\nimport handleUser from './handle-user';\nimport closeConfirmation from './close-confirmation'\n\nexport default async function ({ element,  userId }: IGetUser) {\n    const { params } = element;\n    const { getUserUrl } = params;\n    const url = getUserUrl && `${getUserUrl}/${userId}`;\n\n    let response: GetNewUserResponse;\n\n    if (url) {\n        try {\n            response = await fetch(url)\n                .then(response => response.json());\n\n            if (response.result === 'successful') {\n                closeConfirmation({ element });\n\n                await handleUser({\n                    element,\n                    user: response.data.user\n                });\n            }\n        } catch(error) {\n            console.error('Error getting user');\n            console.error(error);\n        }\n    }\n}","import {\n    IUserRegistryElement,\n    IParams,\n    IUser,\n    Selector,\n    ObservedAttribute,\n    EventName,\n    IAddUserEventMessage\n} from './types';\nimport css from './css/document-index';\nimport getTemplate from './get-template';\nimport {\n    shadowRoot as shadowRootConfig,\n    observedAttributes,\n    footerObserver as footerObserverConfig,\n    observer as observerConfig,\n    clickEventName,\n    dependencies,\n    customEvent\n} from './config';\nimport getUsers from './get-users';\nimport handleFooter from './handle-footer';\nimport closeConfirmation from './close-confirmation';\nimport deleteUser from './delete-user';\nimport addNewUser, { confirm as addNewUserConfirm } from './add-new-user';\nimport handleEvent from './handle-event';\n\nconst { VamtigerBrowserMethod } = self;\nconst { loadScript, intersectionObserver } = VamtigerBrowserMethod;\n\nexport const name = 'vamtiger-user-registry';\n\ncss && Promise\n    .all([...dependencies, { name, css }].map(loadScript))\n    .catch(console.error);\n\nexport default class VamtigerUserRegistry extends HTMLElement implements IUserRegistryElement {\n    readonly params: IParams;\n    user = new Map<HTMLElement, IUser>();\n    deleteUserElement?: HTMLElement;\n    requestUrls = new Set<string>();\n    footerObserver?: MutationObserver;\n\n    constructor() {\n        super();\n\n        const shadowRoot = this.attachShadow(shadowRootConfig);\n        const stylesheet = getTemplate({\n            selector: Selector.style\n        });\n        const ui = getTemplate({\n            selector: Selector.shadowUi\n        });\n        const elements = [\n            stylesheet,\n            ui\n        ];\n        const dataset: IUserRegistryElement['dataset'] = this.dataset;\n        const uiDatatset: IUserRegistryElement['dataset'] | undefined = ui?.dataset;\n        const {\n            getUsersUrl = '',\n            getUserUrl = '',\n            deleteUserUrl = '',\n            handleUserTimeout = 0,\n            addNewUserUrl = ''\n        } = dataset;\n\n        this.params = {\n            layoutMarkers: dataset.hasOwnProperty('layoutMarkers'),\n            testMode: dataset.hasOwnProperty('testMode'),\n            addNewUserUrl,\n            getUsersUrl,\n            getUserUrl,\n            deleteUserUrl,\n            handleUserTimeout: Number(handleUserTimeout),\n            getAllUsers: dataset.hasOwnProperty('getAllUsers') || !intersectionObserver\n        };\n\n        if (this.params.layoutMarkers && uiDatatset) {\n            uiDatatset.layoutMarkers = '';\n        }\n\n        if (this.params.testMode && uiDatatset) {\n            uiDatatset.testMode = '';\n        }\n\n        elements.forEach(element => element && shadowRoot.appendChild(element));\n    }\n\n    static get observedAttributes() {\n        return observedAttributes;\n    }\n\n    async connectedCallback() {\n        const element = this;\n        const { shadowRoot, params } = element;\n        const { testMode, layoutMarkers } = params;\n        const shadowUi = shadowRoot?.querySelector<HTMLElement>(Selector.shadowUi);\n        const layoutMarkersToggle = shadowRoot?.querySelector<HTMLElement>(Selector.layoutMarkersToggle);\n        const addNewUserButton = !element.querySelector<HTMLButtonElement>(Selector.addNewUserButton) && getTemplate({\n            selector: Selector.addNewUserButton\n        });\n        const confirmDeleteDialog = getTemplate({\n            selector: Selector.confirmDeleteDialog\n        });\n        const confirmAddNewUserDialog = getTemplate({\n            selector: Selector.confirmAddNewUserDialog\n        });\n        const confirmDeleteButton = confirmDeleteDialog\n            ?.querySelector<HTMLElement>(Selector.confirmButtonOkay)\n        const confirmAddNewUserButton = confirmAddNewUserDialog\n            ?.querySelector<HTMLElement>(Selector.confirmButtonOkay)\n        const elements = [\n            addNewUserButton,\n            confirmDeleteDialog,\n            confirmAddNewUserDialog\n        ];\n        const closeConfirmationElements = [\n            confirmDeleteDialog?.querySelector<HTMLElement>(Selector.cancelDialog),\n            confirmAddNewUserDialog?.querySelector<HTMLElement>(Selector.cancelDialog)\n        ];\n        const footer = shadowRoot?.querySelector<HTMLElement>(Selector.footer);\n        const dataset: IUserRegistryElement['dataset'] = this.dataset;\n\n        elements.forEach(currentElement => currentElement && element.appendChild(currentElement));\n\n        closeConfirmationElements.forEach(currentElement => currentElement && currentElement\n            .addEventListener(clickEventName, () => closeConfirmation({element})));\n\n        if (addNewUserButton) {\n            addNewUserButton.addEventListener(clickEventName, () => addNewUserConfirm({element}));\n        }\n\n        if (confirmDeleteButton) {\n            confirmDeleteButton.addEventListener(clickEventName, () => deleteUser({element}));\n        }\n\n        if (confirmAddNewUserButton) {\n            confirmAddNewUserButton.addEventListener(clickEventName, () => addNewUser({element}));\n        }\n\n        if (footer && intersectionObserver) {\n            this.footerObserver = new MutationObserver((mutationLisit, observer) => handleFooter({\n                element,\n                mutationLisit,\n                observer\n            }));\n\n            this.footerObserver.observe(footer, footerObserverConfig);\n            intersectionObserver.observe(footer);\n        } else {\n            dataset.getAllUsers = '';\n        }\n\n        if (testMode || layoutMarkers) {\n            layoutMarkersToggle?.addEventListener(clickEventName, () => {\n                if (shadowUi) {\n                    shadowUi.dataset.layoutMarkers = '';\n\n                    if (layoutMarkersToggle.dataset.hasOwnProperty('active')) {\n                        delete layoutMarkersToggle.dataset.active;\n                        delete element.dataset.layoutMarkers;\n                        delete shadowUi?.dataset.layoutMarkers;\n                    } else {\n                        layoutMarkersToggle.dataset.active = '';\n                        element.dataset.layoutMarkers = '';\n                    }\n                }\n            })\n        }\n\n        await getUsers({ element });\n\n        dataset.connected = '';\n\n        element.addEventListener(\n            EventName.addUser,\n            (event: CustomEventInit<IAddUserEventMessage>) => handleEvent({element, event}));\n\n        element.dispatchEvent(customEvent[\"vamtiger-user-registry-connected\"]);\n    }\n\n    attributeChangedCallback(name: ObservedAttribute, oldValue: string, newValue: string) {\n\n    }\n}","import constructor, { name } from './element';\n\nconst { VamtigerBrowserMethod } = self;\nconst { defineCustomElement } = VamtigerBrowserMethod;\n\ndefineCustomElement({\n    name,\n    constructor\n});","import {\n    IHandleFooter,\n    Selector\n} from './types';\nimport getUsers from './get-users';\n\nexport default async function ({element, mutationLisit, observer}: IHandleFooter) {\n    const { shadowRoot, params } = element;\n    const { getUsersNextPageUrl } = params;\n    const footer = shadowRoot?.querySelector<HTMLElement>(Selector.footer);\n    const footerVisible = Number(footer?.dataset?.visible || 0);\n\n    if (getUsersNextPageUrl && footerVisible) {\n        await getUsers({element});\n    }\n}","import {\n    IHandleEvent\n} from './types';\nimport handleUser from './handle-user';\n\nexport default function ({element, event}: IHandleEvent) {\n    const { detail } = event;\n    const user = detail?.user;\n\n    user && handleUser({element, user});\n}"],"names":["StringConstant","Selector","EventName","RequestMethod","ObservedAttributes","SlotName","nothing","template","document","createElement","templateHtml","html","join","innerHTML","params","selector","attributes","properties","attributesKeys","Object","keys","templateElement","content","querySelector","currentTemplate","cloneNode","assign","forEach","key","setAttribute","shadowRoot","mode","observedAttributes","eventParams","bubbles","customEvent","[object Object]","connected","CustomEvent","idleTimeout","footerObserver","clickEventName","ontouchstart","element","dataset","overlay","overlayDataset","confirm","requestIdleCallback","self","user","Map","handleUser","setTimeout","name","surname","email","userTemplate","Array","from","values","some","id","userElement","getTemplate","slot","set","addEventListener","deleteUserElement","confirmDelete","appendChild","dispatchEvent","userAdded","detail","VamtigerBrowserMethod","pause","intersectionObserver","getUsers","requestUrls","getUsersUrl","getUsersNextPageUrl","getAllUsers","handleUserTimeout","footer","url","size","usersResponse","currentUsers","has","add","fetch","then","response","json","data","users","next_page_url","footerVisible","Number","visible","disconnect","unobserve","error","getUsersError","addNewUserUrl","form","addNewUserForm","formData","FormData","requestParams","method","POST","body","result","userId","getUserUrl","closeConfirmation","console","getUser","reset","errorElements","Set","querySelectorAll","addNewUserFormInputError","formGroup","errorSelector","input","inputData","inputError","inputErrorData","formGroupErrorData","log","field","split","pop","addNewUserFormError","errorDescription","closest","defaultErrorMessage","delete","errorElement","handleFailure","loadScript","css","Promise","all","href","map","catch","defineCustomElement","HTMLElement","super","this","attachShadow","shadowRootConfig","stylesheet","style","ui","shadowUi","elements","uiDatatset","deleteUserUrl","layoutMarkers","hasOwnProperty","testMode","layoutMarkersToggle","addNewUserButton","confirmDeleteDialog","confirmAddNewUserDialog","confirmDeleteButton","confirmButtonOkay","confirmAddNewUserButton","closeConfirmationElements","cancelDialog","currentElement","addNewUserConfirm","get","DELETE","undefined","parentElement","removeChild","deleteUser","addNewUser","MutationObserver","mutationLisit","observer","handleFooter","observe","footerObserverConfig","active","addUser","event","handleEvent","oldValue","newValue"],"mappings":"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"}